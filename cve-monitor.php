<?
	/*
	 *	Copyright 2019, Alex Pankratov. All rights reserved.
	 *
	 *	https://github.com/apankrat/cve-monitor
	 *
	 *	This code is distributed under terms of BSD license. 
	 *	You can obtain the copy of the license by visiting:
	 *
	 *	http://www.opensource.org/licenses/bsd-license.php
	 */

	/*
	 *	the config
	 */
	const RECEPIENTS         = 'new-cve-ids-here@...';
	const EMAIL_ALERT        = 'cve-monitor-issues@...';
	const EMAIL_FROM         = 'cve-monitor-script@...';

	const INI_FILE           = '~/.cvemon/state.ini';
	const LOG_FILE           = '/var/log/cve-monitor.log';
	
	const TWITTER_OAUTH_PHP  = '/path/to/TwitterOAuth/oauth.php';

	const TWITTER_API_KEY    = '...';
	const TWITTER_API_SECRET = '...';

	/*
	 *	internals
	 */
	const CVE_TWITTER_ID     = 'CVEnew';
	const CVE_PAGE_URL       = 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=%CVE%';
	const CVE_PAGE_DESC_RE   = '/<th colspan="2">Description<\/th>\s*<\/tr>\s*<tr>\s*<td colspan="2">(.*?)<\/td>/s';

	/*
	 *	the script
	 */
	require_once TWITTER_OAUTH_PHP;
	require_once 'cve-monitor-misc.php';

	use Abraham\TwitterOAuth\TwitterOAuth;

	//
	$interactive = isset($_SERVER['TERM']);

	$log_file = expand_path(LOG_FILE);
	$log = new Logger($log_file, $interactive);

	//
	$last_seen = 0;

	$ini_file = expand_path(INI_FILE);
	prep_folder($ini_file);

	if (file_exists($ini_file))
	{
		$ini = @parse_ini_file($ini_file);
		if (! $ini)
			alert('load_ini() failed, $ini_file');

		if (! $ini['last_seen'])
			alert('malformed ini file, $ini_file');

		$last_seen = $ini['last_seen'];
	}

	//
	$conn = new TwitterOAuth(TWITTER_API_KEY, TWITTER_API_SECRET);

	try
	{
		$log->write('oauth2/token...');
		$req = $conn->oauth2("oauth2/token", [ 'grant_type' => 'client_credentials' ]);
		if (! $req)
			alert('oauth2/token failed');
	}
	catch (Exception $e)
	{
		$log->write_r($e);
		alert('oauth2/token exception');
	}
	
	$bearer_token = $req->access_token;

	//
	$conn = new TwitterOAuth(TWITTER_API_KEY, TWITTER_API_SECRET, null, $bearer_token);
	
	try
	{
		$log->write('statuses/user_timeline...');
		
		$ext =
		[
			'screen_name' => CVE_TWITTER_ID,
			'trim_user'   => 1
		];

		if ($last_seen)
			$ext['since_id'] = $last_seen;

		$req = $conn->get("statuses/user_timeline", $ext);
		if (! $req)
		{
			$log->write("Nothing new since $last_seen");
			exit;
		}

		$log->write(count($req) . " new since $last_seen");
	}
	catch (Exception $e)
	{
		$log->write_r($e);
		alert('statuses/user_timeline exception');
	}

	//
	$todo = [];

	foreach ($req as $tweet)
	{
		$x['id']   = $tweet->id;         // 1187862701730598912
		$x['when'] = $tweet->created_at; // Fri Oct 25 22:45:12 +0000 2019
		$x['text'] = $tweet->text;

		$x['cve']  = '';
		$x['page'] = '';
		$x['desc'] = '';
		$x['subj'] = '';

		if (preg_match('/^(CVE[-0-9]+)/', $tweet->text, $m))
		{
			$x['cve']  = $m[1];
			$x['page'] = str_replace("%CVE%", $m[1], CVE_PAGE_URL);
		}
		else
		{
			$log->write_r($tweet);
			alert("malformed tweet, {$tweet->id}");
		}

		$todo[] = $x;

		$last_seen = max($last_seen, $tweet->id);
	}

	//
	foreach ($todo as &$x)
	{
		$x['desc'] = '(failed to retrieve)';

		$page = $x['page'];
		if (! $page)
			continue;

		$log->write("Fetching $page ...");
		$html = file_get_contents($page);
		if (! $html)
		{
			alert("failed to fetch, $page");
			continue;
		}

		if (! preg_match(CVE_PAGE_DESC_RE, $html, $m))
		{
			alert("malformed html, $page");
			continue;
		}

		$x['desc'] = trim($m[1]);
	}

	unset($x);

	//
	foreach ($todo as &$x)
	{
		if ($x['desc'])
			$subj = "{$x['cve']} - {$x['desc']}";
		else
			$subj = $x['text'];

		// trim to the first sentence

		$re = '/^(.+?(\. |\.$))/';
		if (preg_match($re, $subj, $m))
			$subj = $m[1];

		// trim to the ... if present (if using 'text')

		$pos = strpos($subj, "\xE2\x80\xA6");
		if ($pos)
		{
			$subj = substr($subj, 0, $pos) . '...';
		}
		else
		if (strlen($subj) > 120)
		{
			// trim if too long
			
			$pos = strpos($subj, ' ', 110);
			if (! $pos) $pos = 110;
			$subj = substr($subj, 0, $pos+1) . "...";
		}
		
		$x['subj'] = $subj;
	}

	unset($x);

	//
	foreach ($todo as $x)
		$log->write("{$x['id']} | {$x['when']} | {$x['subj']}");

	$log->write("last_seen = $last_seen");

	//
	$emails = is_array(RECEPIENTS) ? RECEPIENTS : [ RECEPIENTS ];

	foreach ($todo as $x)
	{
		$subj = $x['subj'];
		$text = "When: " . $x['when'] . "\n" .
		        "Page: " . $x['page'] . "\n" .
		        "\n" .
		        $x['desc'];

		foreach ($emails as $to)
			mail($to, $subj, $text, "From: " . EMAIL_FROM);
	}

	//
	$ini_data = "last_seen = $last_seen\n";

	if (! @file_put_contents($ini_file, $ini_data))
		alert("save_ini() failed, $ini_file");
?>
